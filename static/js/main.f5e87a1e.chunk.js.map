{"version":3,"sources":["components/Header.js","context/AppReducer.js","context/GlobalState.js","components/ItemCard.js","components/Favorite.js","components/ResultCard.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","to","state","action","type","favourite","payload","filter","beer","id","initialState","localStorage","getItem","JSON","parse","GlobalContext","createContext","GlobalProvider","props","useReducer","AppReducer","dispatch","useEffect","setItem","stringify","Provider","value","removeFromfavourite","addItemToFavouriteList","item","children","ItemCard","useContext","onClick","image_url","src","alt","name","text","description","maxLine","ellipsis","trimRight","basedOn","Favorite","length","map","key","ResultCard","useState","colorClass","setColorClass","watchedDisabled","find","o","disabled","Search","query","setQuery","results","setResults","fetch","then","res","json","data","errors","console","log","placeholder","onChange","e","preventDefault","target","dataLength","style","textAlign","App","exact","path","component","Favorites","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f5e87a1e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport FavoriteSharpIcon from \"@material-ui/icons/FavoriteSharp\";\r\nexport const Header = () => {\r\n  return (\r\n    <header>\r\n      <div className=\"container\">\r\n        <div className=\"inner-content\">\r\n          <div className=\"brand\">\r\n            <Link to=\"/reactjs-beer-lovers\">Beer Lovers</Link>\r\n          </div>\r\n\r\n          <ul className=\"nav-links\">\r\n            <li>\r\n              <Link to=\"/favorite\">\r\n                Favorites <FavoriteSharpIcon className=\"faviort-icon\" />\r\n              </Link>\r\n            </li>\r\n\r\n            <li>\r\n              <Link to=\"/reactjs-beer-lovers\" className=\"btn btn-main\">\r\n                Search\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n","export default (state, action) => {\r\n  switch (action.type) {\r\n    case \"ADD_ITEM_TO_FAVOURITELIST\":\r\n      return {\r\n        ...state,\r\n        favourite: [action.payload, ...state.favourite],\r\n      };\r\n    case \"REMOVE_FROM_favourite\":\r\n      return {\r\n        ...state,\r\n        favourite: state.favourite.filter((beer) => beer.id !== action.payload),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { createContext, useReducer, useEffect } from \"react\";\r\nimport AppReducer from \"./AppReducer\";\r\n\r\n// initial state\r\nconst initialState = {\r\n  favourite: localStorage.getItem(\"favourite\")\r\n    ? JSON.parse(localStorage.getItem(\"favourite\"))\r\n    : [],\r\n};\r\n\r\n// create context\r\nexport const GlobalContext = createContext(initialState);\r\n\r\n// provider components\r\nexport const GlobalProvider = (props) => {\r\n  const [state, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"favourite\", JSON.stringify(state.favourite));\r\n  }, [state]);\r\n\r\n  // actions\r\n  const addItemToFavouriteList = (item) => {\r\n    dispatch({ type: \"ADD_ITEM_TO_FAVOURITELIST\", payload: item });\r\n  };\r\n\r\n  const removeFromfavourite = (id) => {\r\n    dispatch({ type: \"REMOVE_FROM_favourite\", payload: id });\r\n  };\r\n\r\n  return (\r\n    <GlobalContext.Provider\r\n      value={{\r\n        favourite: state.favourite,\r\n        removeFromfavourite,\r\n        addItemToFavouriteList,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\nimport \"../lib/font-awesome/css/style.css\";\r\nimport LinesEllipsis from \"react-lines-ellipsis\";\r\nimport StarsIcon from \"@material-ui/icons/Stars\";\r\nexport const ItemCard = ({ beer }) => {\r\n  const { removeFromfavourite } = useContext(GlobalContext);\r\n\r\n  return (\r\n    <div className=\"result-card\">\r\n      <Link to={`/movie/${beer.id}`}></Link>\r\n      <div className=\"poster-wrappers1\">\r\n        <button className=\"btn2\">\r\n          <StarsIcon onClick={() => removeFromfavourite(beer.id)} />\r\n        </button>\r\n\r\n        <div>\r\n          {beer.image_url ? (\r\n            <img\r\n              className=\"poster1\"\r\n              src={beer.image_url}\r\n              alt={`${beer.name} Poster`}\r\n            />\r\n          ) : (\r\n            <div className=\"filler-poster\" />\r\n          )}\r\n        </div>\r\n        <div className=\"title\">\r\n          <h3>{beer.name}</h3>\r\n\r\n          <LinesEllipsis\r\n            text={beer.description}\r\n            maxLine=\"3\"\r\n            ellipsis=\"...\"\r\n            trimRight\r\n            basedOn=\"letters\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\nimport { ItemCard } from \"./ItemCard\";\r\n\r\nconst Favorite = () => {\r\n  const { favourite } = useContext(GlobalContext);\r\n\r\n  return (\r\n    <div className=\"movie-page\">\r\n      <div className=\"container\">\r\n        <div className=\"header\">\r\n          <h1 className=\"heading\"> Your Favorites</h1>\r\n        </div>\r\n\r\n        {favourite.length > 0 ? (\r\n          <div className=\"movie-grid\">\r\n            {favourite.map((beer) => (\r\n              <ItemCard beer={beer} key={beer.id} />\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <h2 className=\"no-movies\">No Beer in your list! Add some!</h2>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Favorite;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\nimport \"../lib/font-awesome/css/style.css\";\r\nimport LinesEllipsis from \"react-lines-ellipsis\";\r\nimport StarsIcon from \"@material-ui/icons/Stars\";\r\n\r\nexport const ResultCard = ({ beer }) => {\r\n  const [colorClass, setColorClass] = useState(\"\");\r\n  const { addItemToFavouriteList, favourite } = useContext(GlobalContext);\r\n\r\n  let storedItemWatched = favourite.find((o) => o.id === beer.id);\r\n\r\n  const watchedDisabled = storedItemWatched ? true : false;\r\n  \r\n\r\n  return (\r\n    <div className=\"result-card\">\r\n      <Link to={`/movie/${beer.id}`}></Link>\r\n      <div className=\"poster-wrappers1\">\r\n        <button\r\n          className=\"btn1\"\r\n          disabled={watchedDisabled}\r\n          onClick={() => addItemToFavouriteList(beer)}\r\n        >\r\n          <StarsIcon\r\n            className={colorClass}\r\n            onClick={() => setColorClass(\"activecolor\")}\r\n          />\r\n        </button>\r\n\r\n        <div>\r\n          {beer.image_url ? (\r\n            <img\r\n              className=\"poster1\"\r\n              src={beer.image_url}\r\n              alt={`${beer.name} Poster`}\r\n            />\r\n          ) : (\r\n            <div className=\"filler-poster\" />\r\n          )}\r\n        </div>\r\n        <div className=\"title\">\r\n          <h3>{beer.name}</h3>\r\n\r\n          <LinesEllipsis\r\n            text={beer.description}\r\n            maxLine=\"3\"\r\n            ellipsis=\"...\"\r\n            trimRight\r\n            basedOn=\"letters\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { ResultCard } from \"./ResultCard\";\r\nimport \"../lib/font-awesome/css/style.css\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nconst Search = () => {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [results, setResults] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://api.punkapi.com/v2/beers?page=1&per_page=80\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (!data.errors) {\r\n          setResults(data);\r\n        } else {\r\n          setResults([]);\r\n        }\r\n      });\r\n  }, []);\r\n  const onChange = (e) => {\r\n    e.preventDefault();\r\n\r\n    setQuery(e.target.value);\r\n  };\r\n\r\n  const handleClick = () => {\r\n    fetch(`https://api.punkapi.com/v2/beers?beer_name=${query}`)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (!data.errors) {\r\n          setResults(data);\r\n        } else {\r\n          setResults([]);\r\n        }\r\n      });\r\n  };\r\n  console.log(results);\r\n  return (\r\n    <div>\r\n      <div className=\"input-wrapper\">\r\n        <input\r\n          className=\"input2\"\r\n          type=\"text\"\r\n          placeholder=\"Search for Beers\"\r\n          value={query}\r\n          onChange={onChange}\r\n        />\r\n\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            onClick={handleClick}\r\n            className=\"btn btn-success\"\r\n          >\r\n            <SearchIcon />\r\n            <span id=\"btn-success\" className=\"btn4\">\r\n              Search\r\n            </span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <InfiniteScroll dataLength={results.length}>\r\n        {results ? (\r\n          results.length > 0 ? (\r\n            <ul className=\"results1\">\r\n              {results.map((beer) => (\r\n                <li key={beer.id}>\r\n                  <ResultCard beer={beer} />\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          ) : (\r\n            <h2 style={{ textAlign: \"center\" }}>Loading...</h2>\r\n          )\r\n        ) : (\r\n          <h2 style={{ textAlign: \"center\" }}>Result Not Found</h2>\r\n        )}\r\n      </InfiniteScroll>\r\n    </div>\r\n  );\r\n};\r\nexport default Search;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { Header } from \"./components/Header\";\r\nimport Favorites from \"./components/Favorite\";\r\n\r\nimport Search from \"./components/Search\";\r\nimport \"./App.css\";\r\nimport \"./lib/font-awesome/css/all.min.css\";\r\n\r\nimport { GlobalProvider } from \"./context/GlobalState\";\r\n\r\nfunction App() {\r\n  return (\r\n    <GlobalProvider>\r\n      <Router>\r\n        <Header />\r\n\r\n        <Switch>\r\n        \r\n          <Route exact path=\"/\" component={Search} />\r\n          <Route exact path=\"/reactjs-beer-lovers\" component={Search} />\r\n          <Route path=\"/favorite\" component={Favorites} />\r\n        </Switch>\r\n      </Router>\r\n    </GlobalProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}